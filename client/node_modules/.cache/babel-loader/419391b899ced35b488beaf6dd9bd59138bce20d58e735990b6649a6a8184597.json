{"ast":null,"code":"import { mapGetters } from \"vuex\";\nexport default {\n  props: {\n    item: {\n      type: Object,\n      required: true,\n      default: () => {}\n    }\n  },\n  methods: {\n    likeItem() {\n      this.$appAxios({\n        url: this.alreadyLiked ? `/user_likes/${this.likedItem.id}` : \"/user_likes\",\n        method: this.alreadyLiked ? \"DELETE\" : \"POST\",\n        data: {\n          userId: this._getCurrentUser.id,\n          bookmarkId: this.item.id\n        }\n      }).then(user_like_response => {\n        let bookmarks = [...this._userLikes];\n        if (this.alreadyLiked) {\n          bookmarks = bookmarks.filter(b => b.id !== this.likedItem.id);\n        } else {\n          bookmarks = [...bookmarks, user_like_response.data];\n        }\n        this.$store.commit(\"setLikes\", bookmarks);\n      });\n    },\n    bookmarkItem() {\n      this.$appAxios({\n        url: this.alreadyBookmarked ? `/user_bookmarks/${this.bookmarkedItem.id}` : \"/user_bookmarks\",\n        method: this.alreadyBookmarked ? \"DELETE\" : \"POST\",\n        data: {\n          userId: this._getCurrentUser.id,\n          bookmarkId: this.item.id\n        }\n      }).then(user_bookmark_response => {\n        let bookmarks = [...this._userBookmarks];\n        if (this.alreadyBookmarked) {\n          bookmarks = bookmarks.filter(b => b.id !== this.bookmarkedItem.id);\n        } else {\n          bookmarks = [...bookmarks, user_bookmark_response.data];\n        }\n        this.$store.commit(\"setBookmarks\", bookmarks);\n      });\n    }\n  },\n  computed: {\n    categoryName() {\n      return this.item?.category?.name || \"-\";\n    },\n    userName() {\n      return this.item?.user?.fullname || \"-\";\n    },\n    alreadyLiked() {\n      return Boolean(this.likedItem);\n    },\n    alreadyBookmarked() {\n      return Boolean(this.bookmarkedItem);\n    },\n    bookmarkedItem() {\n      return this._userBookmarks?.find(b => b.bookmarkId === this.item.id);\n    },\n    likedItem() {\n      return this._userLikes?.find(b => b.bookmarkId === this.item.id);\n    },\n    ...mapGetters([\"_getCurrentUser\", \"_userLikes\", \"_userBookmarks\"])\n  }\n};","map":{"version":3,"names":["mapGetters","props","item","type","Object","required","default","methods","likeItem","$appAxios","url","alreadyLiked","likedItem","id","method","data","userId","_getCurrentUser","bookmarkId","then","user_like_response","bookmarks","_userLikes","filter","b","$store","commit","bookmarkItem","alreadyBookmarked","bookmarkedItem","user_bookmark_response","_userBookmarks","computed","categoryName","category","name","userName","user","fullname","Boolean","find"],"sources":["C:\\Users\\Emirhan Sevim\\Desktop\\vue-proje\\booklike-composition\\client\\src\\components\\Shared\\appBookmarkList\\BookmarkListItem.vue"],"sourcesContent":["<template>\r\n  <div class=\"bg-white flex flex-col gap-x-3 rounded-md shadow-sm\">\r\n    <div class=\"p-3\">\r\n      <a :href=\"item.url\" target=\"_blank\" class=\"hover:text-black font-bold text-l mb-1 text-gray-600 text-center\">{{ item.title || \"-\" }}</a>\r\n      <div class=\"flex items-center justify-center mt-2 gap-x-1\">\r\n        <button\r\n          @click=\"likeItem\"\r\n          class=\"like-btn group\"\r\n          :class=\"{\r\n            'like-item-active': alreadyLiked\r\n          }\"\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"fill-current group-hover:text-white\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n            <path d=\"M0 0h24v24H0V0zm0 0h24v24H0V0z\" fill=\"none\" />\r\n            <path\r\n              d=\"M9 21h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.58 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2zM9 9l4.34-4.34L12 10h9v2l-3 7H9V9zM1 9h4v12H1z\"\r\n            />\r\n          </svg>\r\n        </button>\r\n        <button\r\n          @click=\"bookmarkItem\"\r\n          class=\"bookmark-btn group\"\r\n          :class=\"{\r\n            'bookmark-item-active': alreadyBookmarked\r\n          }\"\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"fill-current group-hover:text-white\" enable-background=\"new 0 0 24 24\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\r\n            <rect fill=\"none\" />\r\n            <path d=\"M17,11v6.97l-5-2.14l-5,2.14V5h6V3H7C5.9,3,5,3.9,5,5v16l7-3l7,3V11H17z M21,7h-2v2h-2V7h-2V5h2V3h2v2h2V7z\" />\r\n          </svg>\r\n        </button>\r\n        <div class=\"relative group\">\r\n          <button class=\"details-btn !-z-[1] group\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"fill-current group-hover:text-gray-700\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n              <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n              <path d=\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H5.17l-.59.59-.58.58V4h16v12zM6 12h2v2H6zm0-3h2v2H6zm0-3h2v2H6zm4 6h5v2h-5zm0-3h8v2h-8zm0-3h8v2h-8z\" />\r\n            </svg>\r\n            <p class=\"details-container\">\r\n              {{ item.description }}\r\n            </p>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"text-xs text-gray-400 mt-2 flex justify-between\">\r\n        <a href=\"#\" class=\"hover:text-black\"> {{ userName }} </a>\r\n        <span>14 Mart</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"bg-red-200 p-1 mt-auto text-red-900 text-center text-sm\">{{ categoryName }}</div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapGetters } from \"vuex\";\r\nexport default {\r\n  props: {\r\n    item: {\r\n      type: Object,\r\n      required: true,\r\n      default: () => {}\r\n    }\r\n  },\r\n  methods: {\r\n    likeItem() {\r\n      this.$appAxios({\r\n        url: this.alreadyLiked ? `/user_likes/${this.likedItem.id}` : \"/user_likes\",\r\n        method: this.alreadyLiked ? \"DELETE\" : \"POST\",\r\n        data: {\r\n          userId: this._getCurrentUser.id,\r\n          bookmarkId: this.item.id\r\n        }\r\n      }).then(user_like_response => {\r\n        let bookmarks = [...this._userLikes];\r\n        if (this.alreadyLiked) {\r\n          bookmarks = bookmarks.filter(b => b.id !== this.likedItem.id);\r\n        } else {\r\n          bookmarks = [...bookmarks, user_like_response.data];\r\n        }\r\n        this.$store.commit(\"setLikes\", bookmarks);\r\n      });\r\n    },\r\n    bookmarkItem() {\r\n      this.$appAxios({\r\n        url: this.alreadyBookmarked ? `/user_bookmarks/${this.bookmarkedItem.id}` : \"/user_bookmarks\",\r\n        method: this.alreadyBookmarked ? \"DELETE\" : \"POST\",\r\n        data: {\r\n          userId: this._getCurrentUser.id,\r\n          bookmarkId: this.item.id\r\n        }\r\n      }).then(user_bookmark_response => {\r\n        let bookmarks = [...this._userBookmarks];\r\n        if (this.alreadyBookmarked) {\r\n          bookmarks = bookmarks.filter(b => b.id !== this.bookmarkedItem.id);\r\n        } else {\r\n          bookmarks = [...bookmarks, user_bookmark_response.data];\r\n        }\r\n        this.$store.commit(\"setBookmarks\", bookmarks);\r\n      });\r\n    }\r\n  },\r\n  computed: {\r\n    categoryName() {\r\n      return this.item?.category?.name || \"-\";\r\n    },\r\n    userName() {\r\n      return this.item?.user?.fullname || \"-\";\r\n    },\r\n    alreadyLiked() {\r\n      return Boolean(this.likedItem);\r\n    },\r\n    alreadyBookmarked() {\r\n      return Boolean(this.bookmarkedItem);\r\n    },\r\n    bookmarkedItem() {\r\n      return this._userBookmarks?.find(b => b.bookmarkId === this.item.id);\r\n    },\r\n    likedItem() {\r\n      return this._userLikes?.find(b => b.bookmarkId === this.item.id);\r\n    },\r\n    ...mapGetters([\"_getCurrentUser\", \"_userLikes\", \"_userBookmarks\"])\r\n  }\r\n};\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}